  -  $ For Building Netflix-GPT, we'll use create-react-app package to create our React-app
       create-react-app provides us ready-to-use reat-app template, it creates a organised
       strctured folder-strcture for us, it also setups testing for application
       So If we use CRA to create react app, we dont need to bundle, build or configure our app
       It does everthing on itself and saves our time.

       Behind the scene, CRA uses webpack bundler to bundle the app...
       Earlier, we used to parcel to bundle the app, Earlier we configured/itregated everthing  
       into our App like parcel for bundling, Tailwind for Stling css, jest and react-testing-lib
       for Testing
       We should do this if we want to customize our react-app according to our Requirements


  -  $ We have to configure Tailwind css acc to CRA


  -  $ We'll use Google FireBase for Backend

  
  -  $ We'll use ChatGPT API


  -  $ We can use Formik Library To create Forms in React apps 
     (if we have to create big and complex forms having so-many fields)
     When we have to deal with so-many fields in Form, then managing validation
     handling errors becomes very difficult

  -  $ We'll use utility, lets create validate.js file and write the validation logic in it
       if the validation fails gives us error message

  -  $ For email validation, lets use  => /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$/

     - $ To get form-data either we can use state variables or we can use refrence of that using useRef hook
          we need a refrences of input elements, so refrence is created by React, so we can use it
          #useRef() creates a refrence, so we can refer the html elements using this

  -  $ For buliding Authentication we'll need a Backend, for Backend we'll use "Google FireBase"
          - We'll use Google Firebase as our Backend for User Authenticfication
          - We can also use Firebase for feature like Sign-in-with-Google
          - We can also deploy our Website Application to Google Firebase itself, it gives us server and hosting
            u can host ur application on firebase

        $ - FireBase gives us configuartion, so that we can use connect to the firebase/database

          - Install firebase

          - Creeate a file and copy-paste the firebase code

          - Enable Authentication in firebase
               - Enabel Email id/Password in Sigin method
               - Now we can Register Users

          - Lets deploy/host the application
               - run this command to install firebase CLI => npm install -g firebase-tools
               - then run => firebase login
               - then initialize firenase for config firebase =>firebase init
               - select and enter the options
               - run the build => npm run build
               - deploy the app on firebase => firebase deploy

          - To create a user with email-password import two things "getAuth" and "createUserWithEmailAndPassword" 

     -  $ Once our User Sign-up and Sign-in, we will keep his data(that obj) in Redux store, so wherever
          We'll need the user data we can use it and navigate user to Browse page

          - Lets data in create Redux store to store user obj

        $  - Instead of Dispatching Actions for Sign in, Sign up pr Sign out, we will use a utility
               given by firebase i.e "onAuthStateChanged" 
               - this API/Utility is like an event-listner, we dont want to call this api again-again
                    so lets call this api at root level, we want to call this api as my comp renders
                    using useEffect
                    Whenever the page loads this event listner/utility updates
               - We can Sign In / Sign up/ Sign out the user with using this single API

          - After Signed in / Signed up , lets redirect the user to Browse page
               for that we'll use navigate to  .. for navigation to diffrent route
               - we can use window.location.href for navigation

          - Lets add our Header on Broswe page

     
     - $ We'll use TMDB's API for movies Movies 
          - TMDB doesnt change their API often
          - We cannot use Netflix API bcz they are not public, we need authentication for that



     - $ If the someone is tring to access browse page, we're not checking authentication
          or if user is not present...Ideally it should redirect the user to login page

     - $  If the user is logged in, then redirect him to the browse page
          or If the user is not logged in user is trying to access browse
          page redirect him to login page

          - We have a utility/evenet listner in our body comp i.e onAuthStateChanged
            so everytime our comp re-renders, this utility is called and it checks
            auth of the user

          - It updates the store

         # - So, onAuthStateChanged() event listner should navigate the user
               according to login/logout..

          - Lets put useEffect() in Central place like Header comp
            Header will remain in our app everytime
            - Header is inside our route
            - Even now, we dont need to write navigation logic seprately
              onAuthStateChanged will take care of everyting

          - onAuthStateChanged() event listner/utility will be called whwnever
               our headeer comp is loaded/rendered and header comp will be on the
               dom evertime, we are doing navigation/routing in header comp
               so it will redirect to user acc to his login/logout

          - It will fix our auth bug

          $ - If our the comp is unmounted, we will unsubscribe the onAuthStateChanged()
               because we dont want to sunscribe it everytime useEffect is called

            # onAuthStateChanged() api returns a unsubscribe() function, so when this function
               os called it will remove onAuthStateChanged()
               So when our Header comp is unmounts, it will unsubscribe it

          
        - #  Always put hardcoded url, strings and constant data in our constnats.js file  
               because we can re-use it and have to change once if we need to change it



       $ - For showing movies on browse page, we'l use TMDB database API's to feth data

          - For API data, first login in into TMDB website
          - then edit profile => API 
          - then generate API key and get the api key and registered token

          - Lets move to the documentation, lets use Now playing API of Movies Lists
          - Our API Access token will come in Authorization 
          - We have to use options everytime, lets keep it in constants.js file
          - Let's fetch this now playing api in browse page, we dont want language-filter
